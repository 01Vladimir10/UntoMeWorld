@page "/Churches"
@using Blazored.LocalStorage
@using UntoMeWorld.Domain.Model
@using UntoMeWorld.Domain.Stores
@using UntoMeWorld.WebClient.Client.Model
@using UntoMeWorld.WebClient.Client.Services.Caching
@inject ILocalStorageService LocalStorageService
@inject IChurchesStore ChurchesStore;

@if (_churches?.Any() ?? false)
{
    <table>
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var church in _churches)
        {
            <tr>
                <td>@church.Id</td>
                <td>@church.Name</td>
            </tr>
        }
        </tbody>
    </table>
    <button @onclick="UpdateForce">Update</button>
    <button @onclick="AddChurch">Add</button>
}

@code {
    private ICacheService<IChurch> _cache;
    private List<IChurch> _churches;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _cache = new LocalStorageCache<IChurch, string>(LocalStorageService, c => c.Id, "churches");
        await _cache.InitializeCacheAsync();
        _cache.OnAdded = ChurchesStore.Insert;
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateForce()
    {
        var x = await _cache.GetAll( ChurchesStore.GetAll, true);
        _churches = x.ToList();
    }

    private async Task AddChurch()
    {
        var church = new Church
        {
            Name = "Test Church"
        };
        await _cache.Add(church);
        var _ = await _cache.GetAll(ChurchesStore.GetAll);
        _churches = _.ToList();
    }

}