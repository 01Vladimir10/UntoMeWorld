@using UntoMeWorld.Domain.Model
@using UntoMeWorld.WasmClient.Client.ViewModels

<Dialog @ref="_dialog">
    
    <Content>
        <div class="d-flex flex-column justify-content-start p-3">
            @if (!_isNew)
            {
                <label for="ChurchId">
                    Id
                </label>
                <input id="ChurchId" value="@_church.Id" disabled="disabled"/>
            }

            <br>
            <label for="ChurchName">
                Name
            </label>
            <input type="text" id="ChurchName" @bind="@_church.Name" @attributes="InputAttributes">

            <br>
            <label for="ChurchPastor">
                Pastor
            </label>
            <select @bind="_church.PastorId" id="ChurchPastor" @attributes="InputAttributes">
                @if (string.IsNullOrEmpty(_church.PastorId))
                {
                    <option value="">Select a pastor </option>
                }
                
                @foreach (var pastor in ViewModel!.Pastors)
                {
                    if (_isEditing && _church.PastorId == pastor.Id)
                    {
                        <option value="@pastor.Id" selected="selected">@pastor.Name, @pastor.Lastname</option>
                    }
                    else
                    {
                        <option value="@pastor.Id">@pastor.Name, @pastor.Lastname</option>
                    }
                }
            </select>

        </div>

        <div class="d-flex mt-auto gap-2 m-2">
            @if (!_isNew)
            {
                <button class="btn" @onclick="StartEditing">
                    Edit
                </button>
            }
            @if (_isNew || _isEditing)
            {
                <button class="btn btn-primary" @onclick="Save">
                    Save
                </button>
            }
        </div>
    </Content>
</Dialog>



@code {
    private Dictionary<string, object> InputAttributes => 
        _isEditing ? new Dictionary<string, object>() : new Dictionary<string, object> { { "disabled", "disabled" } };
    
    [CascadingParameter]
    public ChurchesViewModel? ViewModel { get; set; }
    private Church _church = new() { Name = "" };
    private bool _isNew = true;
    private bool _isEditing;
    private Dialog? _dialog;
    
    public void Hide()
    {
        _dialog?.Hide();
    }
    
    public void Show(Church church)
    {
        _isNew = false;
        _isEditing = false;
        _church = church;
        _dialog?.Show();
    }

    public void NewChurch()
    {
        _church = new Church();
        _isNew = true;
        _isEditing = true;
        _dialog?.Show();
    }

    private void StartEditing()
    {
        _isEditing = true;
    }

    private async Task Save()
    {
        if (ViewModel != null)
        {
            if (_isNew)
                await ViewModel.Add(_church);
            else
                await ViewModel.Update(_church);   
        }
        _dialog?.Hide();
    }
    
}