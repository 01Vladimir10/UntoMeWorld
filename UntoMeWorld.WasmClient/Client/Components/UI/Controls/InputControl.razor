@typeparam TValue

<div class="input-control @CssClass">
    <label>
        @Label
        <input type="text" value="@Value" @onchange="OnInputChanged" disabled="@(!IsEnabled)" placeholder="@Placeholder">
    </label>
</div>

@code {
    [Parameter]
    public string CssClass { get; set; }
    private Dictionary<string, object> _arguments = new();
    private bool _isEnabled;
    private string _label = "";
    [Parameter]
    public bool IsEnabled
    {
        get => _isEnabled;
        set
        {
            _isEnabled = value;
            StateHasChanged();
        }
    }
    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public string Label
    {
        get => _label;
        set
        {
            _label = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public TValue Value { get; set; }

    private async Task OnInputChanged(ChangeEventArgs obj)
    {
        Value = (TValue)obj.Value ?? default;
        await ValueChanged.InvokeAsync(Value);
    }

}