@typeparam TKey
@typeparam TItem
@inherits BaseListView<TKey, TItem>


<div class="list-view">
    <div class="list-view__header">
        @if (Columns?.Any() ?? false)
        {
            <div class="row">
                @foreach (var column in Columns)
                {
                    <div class="@column.CssClass">
                        <span class="list-header @column.HeaderCssClass">
                            @column.Header
                        </span>
                    </div>
                }
            </div>
        }
    </div>
    <div class="list-view__content overflow-auto">
        @* ReSharper disable once UnusedParameter.Local *@
        @if (IsLoading)
        {
            @LoadingTemplate
        }
        else if (IsEmpty)
        {
            @EmptyTemplate
        }
        else
        {
            <Virtualize
                @ref="_virtualize"
                Context="item"
                ItemSize="50"
                OverscanCount="5"
                ItemsProvider="ItemsProvider">
                <ItemContent>
                    <div class="list-view-item">
                        <ExpandableItem>
                            <Header>
                                @if (ItemTemplate != null)
                                {
                                    var cell = new ListCell<TKey, TItem> { RowKey = item.Key, Data = item.Item };

                                    <div class="row">
                                        @for (var i = 0; i < Columns.Count; i++)
                                        {
                                            cell.ColumnIndex = i;
                                            <div class="@Columns[i].CssClass">
                                                <div class="list-cell">
                                                    @ItemTemplate(cell)
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </Header>
                            <Content>
                                @if (ExpandableItemContentTemplate != null)
                                {
                                    @ExpandableItemContentTemplate(item.Item)
                                }
                            </Content>

                        </ExpandableItem>
                    </div>
                </ItemContent>
                <Placeholder>
                    <div class="d-flex align-items-center justify-content-center" style="height: 150px">
                        Loading...
                    </div>
                </Placeholder>
            </Virtualize>
        }
    </div>
</div>

@code {
    private Virtualize<ListItem<TKey, TItem>> _virtualize;

    public override async Task Reset()
    {
        await InvokeAsync(async () =>
        {
            await _virtualize.RefreshDataAsync();
            StateHasChanged();
        });
    }

}