@typeparam TItem
@using UntoMeWorld.WasmClient.Client.Utils.Extensions
@using Microsoft.IdentityModel.Tokens
@inherits BaseDropDown<TItem>

<button class="drop-down@(_isOpened ? " open" : "") @CssClass" type="button" @onclick="OpenDropdown">
    <span class="sort-by__label">
        @Placeholder
    </span>

    <span class="drop-down__option">
        @_selectedOption?.DisplayValue.Truncate(MaxDisplayCharLength)
        @_selectedOption?.Icon
    </span>
    @if (_selectedOption != null)
    {
    }
    <PhosphorIcon IconName="PhosphorIcons.CaretDown" CssClass="drop-down__icon"/>
    <ul class="drop-down__options">
        @foreach (var option in Options)
        {
            <li class="@(_selectedOption != null && option.Value.Equals(_selectedOption.Value) ? "selected" : "")"
                @onclick="() => OnOptionSelected(option)" @key="option.Value">
                <span>
                    @option.DisplayValue
                </span>
                @option.Icon
            </li>
        }
    </ul>
</button>

@code {

    private bool _isOpened;

    private void OpenDropdown()
    {
        _isOpened = !_isOpened;
    }

    private DropDownOption<TItem>? _selectedOption;

    protected override TItem? CurrentValue
    {
        get => _selectedOption == null ? default : _selectedOption.Value;
        set
        {
            if (value == null)
            {
                _selectedOption = null;
                return;
            }
            _selectedOption = Options.FirstOrDefault(o => o.Value != null && o.Value.Equals(value));
        }
    }

    private async Task OnOptionSelected(DropDownOption<TItem> option)
    {
        await UpdateValueAsync(option.Value);
    }
}