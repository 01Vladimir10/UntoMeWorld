@page "/children"
@attribute [Authorize]
@using UntoMeWorld.WasmClient.Client.Data.Model
@using UntoMeWorld.Domain.Model
@using UntoMeWorld.Domain.Security
@using UntoMeWorld.WasmClient.Client.Components.Base.Buttons
@using Microsoft.AspNetCore.Authorization
@using UntoMeWorld.Application.Common
@using UntoMeWorld.Application.Services.Base
@using UntoMeWorld.Domain.Common
@using UntoMeWorld.Domain.Query
@using UntoMeWorld.WasmClient.Client.Components.Interop
@using UntoMeWorld.WasmClient.Client.Utils.Extensions


<AuthorizationContext ApiResource="ApiResource.Children">

    <div class="list-layout">
        <div class="list-layout__controls">
            <ListControlsLayout IsMultiSelecting="false">
                <NormalControls>
                    <SearchView
                        @bind-Value="@Query"
                        Placeholder="Search children"
                        EnableSuggestions="true"
                        MaxSuggestions="4"
                        HistoryCollectionKey="children__queries">
                    </SearchView>
                    <DropDown
                        TItem="QueryFilter"
                        @bind-Value="@Filter"
                        Placeholder="Filter -"
                        Options="_filters">
                    </DropDown>
                    <DropDown
                        TItem="SortField"
                        @bind-Value="@SortBy"
                        Placeholder="Sort by -"
                        Options="_options">
                    </DropDown>
                    <AuthorizedPanel
                        RequiredPermission="PermissionType.Add">
                        <Button Style="@ButtonStyle.Primary" IconName="@PhosphorIcons.PlusCircle" Text="Add Child"
                                OnClick="AddChild"
                                CssClass="px-4">

                        </Button>

                    </AuthorizedPanel>
                </NormalControls>
                <MultiSelectControls>
                    Multi selecting...
                </MultiSelectControls>
            </ListControlsLayout>
        </div>
        <div class="list-layout__body">
            <ChildrenList
                @ref="_list"
                OnEditClicked="EditChild"
                OnDeleteClicked="DeleteChild"
                OnRestoreClicked="RestoreChild"
                ItemsProvider="ItemsProvider"/>
        </div>
    </div>
</AuthorizationContext>


@code {

    [Inject]
    public IChildrenService ChildrenService { get; set; } = null!;

    [Inject]
    public ToastService ToastService { get; set; } = null!;

    [CascadingParameter]
    public DialogsService? DialogService { get; set; }

    private ChildrenList? _list;

    private string Query
    {
        get => _query;
        set
        {
            _query = value;
            _list?.Refresh();
        }
    }

    private SortField SortBy
    {
        get => _sortBy;
        set
        {
            _sortBy = value;
            _list?.Refresh();
        }
    }

    private QueryFilter Filter
    {
        get => _filter;
        set
        {
            _filter = value;
            _list?.Refresh();
        }
    }

    private void AddChild()
    {
        DialogService?.ShowDialog<ChildrenDialog, Child, Child>(null, async child =>
        {
            if (child != null)
            {
                try
                {
                    await ChildrenService.Add(child);
                    await ToastService.Success("Added", $"{child.Name} was successfully added!").ShowAsync();
                }
                catch (Exception e)
                {
                    await ToastService.Error(e.GetType().Name, e.Message).ShowAsync();
                }
            }
        }, isCancellable: false);
    }


    private void EditChild(Child editChild)
    {
        DialogService?.ShowDialog<ChildrenDialog, Child, Child>(editChild, async child =>
        {
            if (child != null)
            {
                try
                {
                    await ChildrenService.Update(child);
                    await ToastService.Success("Edited", $"changes on {child.Name} were saved successfully!")
                        .ShowAsync();
                    _list?.Refresh();
                }
                catch (Exception e)
                {
                    await ToastService.Error(e.GetType().Name, e.Message).ShowAsync();
                }
            }
        }, isCancellable: false);
    }

    private void DeleteChild(Child child)
    {
        DialogService?.ShowConfirmationAsync("Delete", $"Are you sure you want to delete this child?\n\t- {child.Name} {child.Lastname}, {child.Church?.Name}",
            async answer =>
            {
                if (!answer)
                    return;

                try
                {
                    await ChildrenService.Delete(child.Id);
                    await ToastService.Success("Deleted", $"{child.Name} was successfully deleted").ShowAsync();
                    _list?.Refresh();
                }
                catch (Exception e)
                {
                    await ToastService.Error(e.GetType().Name, e.Message).ShowAsync();
                }
            });
    }

    private void RestoreChild(Child child)
    {
        DialogService?.ShowConfirmationAsync("Restore", $"Are you sure you want to restore this child?\n\t- {child.Name} {child.Lastname}, {child.Church?.Name}",
            async answer =>
            {
                if (!answer)
                    return;

                try
                {
                    await ChildrenService.Restore(child.Id);
                    await ToastService.Success("Deleted", $"{child.Name} was successfully restored").ShowAsync();
                    _list?.Refresh();
                }
                catch (Exception e)
                {
                    await ToastService.Error(e.GetType().Name, e.Message).ShowAsync();
                }
            });
    }


    private readonly List<DropDownOption<SortField>> _options = new()
    {
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.Name)), "Name",
            PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.Name)), "Name",
            PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.Age)), "Age",
            PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.Age)), "Age",
            PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.Grade)), "Grade",
            PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.Grade)), "Grade",
            PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.IsSponsored)), "Is Sponsored",
            PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.IsSponsored)), "Is Sponsored",
            PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.ReceivesChristmasGift)), "XMas Gift",
            PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.ReceivesChristmasGift)), "XMas Gift",
            PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
    };

    private string _query = string.Empty;

    private async ValueTask<ItemsProviderResult<ListItem<string, Child>>> ItemsProvider(ItemsProviderRequest request)
    {
        var result = await ChildrenService.PaginateAsync(request, 200, _filter, Query, SortBy.FieldName, SortBy.Descendent);
        return new ItemsProviderResult<ListItem<string, Child>>(
            result.Items
                .Select(i =>
                    new ListItem<string, Child>
                    {
                        Key = i.Id,
                        Item = i,
                        IsSelected = false,
                        OnSelectionChanged = (_, _) => { }
                    }), 
            result.TotalItemCount);
    }

    private readonly List<DropDownOption<QueryFilter>> _filters = new()
    {
        new DropDownOption<QueryFilter>(QueryLanguage.Eq(nameof(Child.IsDeleted), false), "Active"),
        new DropDownOption<QueryFilter>(QueryLanguage.Eq(nameof(Child.IsDeleted), true), "Deleted"),
        new DropDownOption<QueryFilter>(
            QueryLanguage.And(
                QueryLanguage.Eq(nameof(Child.IsDeleted), false),
                QueryLanguage.Eq(nameof(Child.IsSponsored), true)), "Active - Sponsored"),
        new DropDownOption<QueryFilter>(
            QueryLanguage.And(
                QueryLanguage.Eq(nameof(Child.IsDeleted), false),
                QueryLanguage.Eq(nameof(Child.ReceivesChristmasGift), true)), "Active - Xmas Gift"),
        new DropDownOption<QueryFilter>(
            QueryLanguage.And(
                QueryLanguage.Eq(nameof(Child.IsDeleted), false),
                QueryLanguage.Eq(nameof(Child.ReceivesUniforms), true)), "Active - Uniforms"),
    };

    private SortField _sortBy = SortField.Desc(nameof(Child.Name));
    private QueryFilter _filter = QueryLanguage.Eq(nameof(Child.IsDeleted), false);

}