@page "/children"
@using UntoMeWorld.WasmClient.Client.Data.Model
@using UntoMeWorld.Domain.Model
@using UntoMeWorld.Domain.Common
@using UntoMeWorld.WasmClient.Client.Services.Base
@using Resources
@using UntoMeWorld.WasmClient.Client.Utils.UIHelpers
@inject IChildrenService _childrenService


<div class="list-layout">

    <div class="list-controls">
        <ListControlsLayout IsMultiSelecting="@_listController.IsMultiSelecting">
            <NormalControls>

                <SearchView
                    OnSearch="OnSearchSubmit"
                    Placeholder="Search children"
                    EnableSuggestions="true"
                    MaxSuggestions="4"
                    HistoryCollectionKey="children__queries">
                </SearchView>
                <DropDown
                    Placeholder="sort by -"
                    Options="_options"
                    OnSelectionChanged="OnSortFieldChanged">
                </DropDown>
            </NormalControls>
            <MultiSelectControls>
                Multi selecting...
            </MultiSelectControls>
        </ListControlsLayout>
    </div>
    
    <div class="d-flex text-sm font-medium text-left p-3">
        <div class="col-8 col-m2-5 text-primary">
            Name & church
        </div>
        <div class="col-2 col-md-1 text-primary">
            Age
        </div>
        <div class="col-2 col-md-1 text-primary">
            Gender
        </div>
        <div class="col-md-1 text-primary d-none d-md-block">
            Sponsored
        </div>
    </div>
    <ListView @ref="_listView"
              ItemsProvider="_listController.ItemsProvider">
        <ItemTemplate Context="item">
            @{
                var child = item.Item;
            }
            <ExpandableItem>
                <ItemTemplate>
                    <div class="d-flex text-sm  text-left font-normal ">
                        <div class="col-8 col-md-5">
                            <span class="text-normal font-medium d-block">
                                @string.Format(LangResources.FormatChildName, child.Name, child.Lastname)
                            </span>
                            <span class="text-secondary d-block">
                                @(child.Church?.Name)
                            </span>
                        </div>
                        <div class="col-2 col-md-1">
                            <div class="d-flex justify-content-center flex-column h-100">

                                <span class="text-secondary">
                                    @child.Age
                                </span>
                            </div>
                        </div>
                        <div class="col-2 col-md-1">
                            <div class="d-flex justify-content-center flex-column h-100">
                                <span class="text-secondary">
                                    @child.Gender
                                </span>
                            </div>
                        </div>
                        <div class="col-1 d-none d-md-block">

                            <div class="d-flex justify-content-center flex-column h-100">

                                <span class="text-secondary">
                                    @RazorUtils.BoolToString(child.IsSponsored)
                                </span>
                            </div>
                        </div>
                    </div>
                </ItemTemplate>
                <ExpandedContentTemplate>
                    <h5>test</h5>
                </ExpandedContentTemplate>
            </ExpandableItem>
        </ItemTemplate>
    </ListView>
</div>


@code {
    private ListView<string, Child> _listView;
    private ListController<string, Child> _listController;

    private readonly List<DropDownOption<SortField>> _options = new()
    {
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
    };

    protected override async Task OnInitializedAsync()
    {
        var paginationHelper = new PaginationHelper<Child>(_childrenService.Paginate) { PageSize = 50 };
        _listController = new ListController<string, Child>(c => c.Id, paginationHelper)
        {
            OnDataRefresh = async () =>
            {
                if (_listView != null)
                    await _listView.Reset();
            }
        };
        await _listController.SetFilter(null);
    }

    private Task OnSortFieldChanged(SortField sortField)
    {
        return _listController.SetSortField(sortField);
    }

    private Task OnSearchSubmit(string query)
    {
        return _listController.SetFilter(
            string.IsNullOrEmpty(query)
                ? null
                : QueryLanguage.TextSearch(query));
    }

}