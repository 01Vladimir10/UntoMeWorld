@page "/children"
@using UntoMeWorld.WasmClient.Client.Data.Model
@using UntoMeWorld.Domain.Model
@using UntoMeWorld.Domain.Common
@using UntoMeWorld.WasmClient.Client.Services.Base
@inject IChurchesService _childrenService


<div class="list-layout">

    <div class="list-controls">
        <ListControlsLayout IsMultiSelecting="@_listController.IsMultiSelecting">
            <NormalControls>
                
                <SearchView
                    OnSearch="OnSearchSubmit"
                    Placeholder="Search children"
                    EnableSuggestions="true"
                    MaxSuggestions="4"
                    HistoryCollectionKey="children__queries">
                </SearchView>
                <DropDown
                    Placeholder="sort by -"
                    Options="_options"
                    OnSelectionChanged="OnSortFieldChanged">
                </DropDown>
            </NormalControls>
            <MultiSelectControls>
                Multi selecting...
            </MultiSelectControls>
        </ListControlsLayout>
    </div>
    <ListView @ref="_listView"
              ItemsProvider="_listController.ItemsProvider">
        <ItemTemplate Context="child">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-1">
                        <input type="checkbox" class="checkbox" @bind-value="@child.IsSelected"/>
                    </div>
                    <div class="col-4">
                        @child.Item.Name
                    </div>
                    <div class="col">
                        @child.Item.Pastor?.Name
                    </div>
                </div>
            </div>
        </ItemTemplate>
    </ListView>
</div>


@code {
    private ListView<string, Church> _listView;
    private ListController<string, Church> _listController;

    private readonly List<DropDownOption<SortField>> _options = new()
    {
        new DropDownOption<SortField>(SortField.Desc(nameof(Church.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Church.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
    };

    protected override async Task OnInitializedAsync()
    {
        var paginationHelper = new PaginationHelper<Church>(_childrenService.Paginate) { PageSize = 50 };
        _listController = new ListController<string, Church>(c => c.Id, paginationHelper)
        {
            OnDataRefresh = async () =>
            {
                if (_listView != null)
                    await _listView.Reset();
            }
        };
        await _listController.SetFilter(null);
    }

    private Task OnSortFieldChanged(SortField sortField)
    {
        return _listController.SetSortField(sortField);
    }

    private Task OnSearchSubmit(string query)
    {
        return _listController.SetFilter(
            string.IsNullOrEmpty(query)
                ? null
                : QueryLanguage.TextSearch(query));
    }

}