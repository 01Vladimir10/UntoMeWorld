@page "/children"
@using UntoMeWorld.WasmClient.Client.Data.Model
@using UntoMeWorld.Domain.Model
@using UntoMeWorld.Domain.Common
@using UntoMeWorld.WasmClient.Client.Services.Base
@inject IChildrenService ChildrenService


<div class="list-layout">
    <div class="list-controls">
        <ListControlsLayout IsMultiSelecting="@_listController.IsMultiSelecting">
            <NormalControls>
                <SearchView
                    OnSearch="OnSearchSubmit"
                    Placeholder="Search children"
                    EnableSuggestions="true"
                    MaxSuggestions="4"
                    HistoryCollectionKey="children__queries">
                </SearchView>
                <DropDown
                    Placeholder="sort by -"
                    Options="_options"
                    OnSelectionChangedAsync="OnSortFieldChanged">
                </DropDown>
            </NormalControls>
            <MultiSelectControls>
                Multi selecting...
            </MultiSelectControls>
        </ListControlsLayout>
    </div>
    
    <ChildrenList
        OnEditClicked="EditChild"
        OnDeleteClicked="DeleteChild"
        @ref="_listView" ItemsProvider="_listController.ItemsProvider"/>
</div>


@code {
    [CascadingParameter] public DialogsService DialogService { get; set; }
    private ChildrenList _listView;
    private ListController<string, Child> _listController;

    private readonly List<DropDownOption<SortField>> _options = new()
    {
        new DropDownOption<SortField>(SortField.Desc(nameof(Child.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowUp)),
        new DropDownOption<SortField>(SortField.Asc(nameof(Child.Name)), "Name", PhosphorIcons.Render(PhosphorIcons.ArrowDown)),
    };


    private void EditChild(Child child)
    {
        DialogService.ShowDialogAsync<ChildrenDialog, Child, Child>(child, async c =>
        {
            if (c != null)
            {
                await ChildrenService.Update(c);
                await _listController.Refresh();
            }
        }, isCancellable:false);
    }
    
    private void DeleteChild(Child child)
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        var paginationHelper = new PaginationHelper<Child>(ChildrenService.Paginate) { PageSize = 50 };
        _listController = new ListController<string, Child>(c => c.Id, paginationHelper)
        {
            OnDataRefresh = async () =>
            {
                if (_listView != null)
                    await _listView.Reset();
            }
        };
        await _listController.SetFilter(null);
    }

    private Task OnSortFieldChanged(SortField sortField)
    {
        return _listController.SetSortField(sortField);
    }

    private Task OnSearchSubmit(string query)
    {
        return _listController.SetFilter(
            string.IsNullOrEmpty(query)
                ? null
                : QueryLanguage.TextSearch(query));
    }

}